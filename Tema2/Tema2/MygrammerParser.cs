//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/laurp/Desktop/Anul 2/LFC/Tema2/Tema2/Mygrammer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MygrammerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		IF=1, ELSE=2, FOR=3, WHILE=4, RETURN=5, INT=6, FLOAT=7, DOUBLE=8, STRING=9, 
		VOID=10, PLUS=11, MINUS=12, MULT=13, DIV=14, MOD=15, LT=16, GT=17, LE=18, 
		GE=19, EQ=20, NE=21, AND=22, OR=23, NOT=24, ASSIGN=25, ADD_ASSIGN=26, 
		SUB_ASSIGN=27, MUL_ASSIGN=28, DIV_ASSIGN=29, MOD_ASSIGN=30, INCREMENT=31, 
		DECREMENT=32, LPAREN=33, RPAREN=34, LBRACE=35, RBRACE=36, COMMA=37, SEMICOLON=38, 
		NUMERIC_LITERAL=39, STRING_LITERAL=40, ID=41, WS=42, LINE_COMMENT=43, 
		BLOCK_COMMENT=44, INVALID=45;
	public const int
		RULE_program = 0, RULE_declaration = 1, RULE_functionDeclaration = 2, 
		RULE_parameterList = 3, RULE_statement = 4, RULE_block = 5, RULE_ifStatement = 6, 
		RULE_whileStatement = 7, RULE_forStatement = 8, RULE_returnStatement = 9, 
		RULE_expressionStatement = 10, RULE_expression = 11, RULE_assignment = 12, 
		RULE_logicalOr = 13, RULE_logicalAnd = 14, RULE_equality = 15, RULE_comparison = 16, 
		RULE_term = 17, RULE_factor = 18, RULE_unary = 19, RULE_primary = 20, 
		RULE_type = 21;
	public static readonly string[] ruleNames = {
		"program", "declaration", "functionDeclaration", "parameterList", "statement", 
		"block", "ifStatement", "whileStatement", "forStatement", "returnStatement", 
		"expressionStatement", "expression", "assignment", "logicalOr", "logicalAnd", 
		"equality", "comparison", "term", "factor", "unary", "primary", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'if'", "'else'", "'for'", "'while'", "'return'", "'int'", "'float'", 
		"'double'", "'string'", "'void'", "'+'", "'-'", "'*'", "'/'", "'%'", "'<'", 
		"'>'", "'<='", "'>='", "'=='", "'!='", "'&&'", "'||'", "'!'", "'='", "'+='", 
		"'-='", "'*='", "'/='", "'%='", "'++'", "'--'", "'('", "')'", "'{'", "'}'", 
		"','", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "IF", "ELSE", "FOR", "WHILE", "RETURN", "INT", "FLOAT", "DOUBLE", 
		"STRING", "VOID", "PLUS", "MINUS", "MULT", "DIV", "MOD", "LT", "GT", "LE", 
		"GE", "EQ", "NE", "AND", "OR", "NOT", "ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", 
		"MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "INCREMENT", "DECREMENT", "LPAREN", 
		"RPAREN", "LBRACE", "RBRACE", "COMMA", "SEMICOLON", "NUMERIC_LITERAL", 
		"STRING_LITERAL", "ID", "WS", "LINE_COMMENT", "BLOCK_COMMENT", "INVALID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Mygrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MygrammerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MygrammerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MygrammerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MygrammerParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext[] functionDeclaration() {
			return GetRuleContexts<FunctionDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration(int i) {
			return GetRuleContext<FunctionDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMygrammerVisitor<TResult> typedVisitor = visitor as IMygrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4166135060474L) != 0)) {
				{
				State = 47;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 44;
					declaration();
					}
					break;
				case 2:
					{
					State = 45;
					functionDeclaration();
					}
					break;
				case 3:
					{
					State = 46;
					statement();
					}
					break;
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 52;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MygrammerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MygrammerParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MygrammerParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMygrammerVisitor<TResult> typedVisitor = visitor as IMygrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			type();
			State = 55;
			Match(ID);
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 56;
				Match(ASSIGN);
				State = 57;
				expression();
				}
			}

			State = 60;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MygrammerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MygrammerParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MygrammerParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MygrammerParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MygrammerParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMygrammerVisitor<TResult> typedVisitor = visitor as IMygrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			type();
			State = 63;
			Match(ID);
			State = 64;
			Match(LPAREN);
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1984L) != 0)) {
				{
				State = 65;
				parameterList();
				}
			}

			State = 68;
			Match(RPAREN);
			State = 69;
			Match(LBRACE);
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4166135058490L) != 0)) {
				{
				{
				State = 70;
				statement();
				}
				}
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 76;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(MygrammerParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(MygrammerParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MygrammerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MygrammerParser.COMMA, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMygrammerVisitor<TResult> typedVisitor = visitor as IMygrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 6, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			type();
			State = 79;
			Match(ID);
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 80;
				Match(COMMA);
				State = 81;
				type();
				State = 82;
				Match(ID);
				}
				}
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMygrammerVisitor<TResult> typedVisitor = visitor as IMygrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_statement);
		try {
			State = 95;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 89;
				block();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 90;
				ifStatement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 91;
				whileStatement();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 92;
				forStatement();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 93;
				returnStatement();
				}
				break;
			case MINUS:
			case NOT:
			case LPAREN:
			case SEMICOLON:
			case NUMERIC_LITERAL:
			case STRING_LITERAL:
			case ID:
				EnterOuterAlt(_localctx, 6);
				{
				State = 94;
				expressionStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MygrammerParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MygrammerParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMygrammerVisitor<TResult> typedVisitor = visitor as IMygrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			Match(LBRACE);
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4166135058490L) != 0)) {
				{
				{
				State = 98;
				statement();
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 104;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MygrammerParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MygrammerParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MygrammerParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MygrammerParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMygrammerVisitor<TResult> typedVisitor = visitor as IMygrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			Match(IF);
			State = 107;
			Match(LPAREN);
			State = 108;
			expression();
			State = 109;
			Match(RPAREN);
			State = 110;
			statement();
			State = 113;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 111;
				Match(ELSE);
				State = 112;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(MygrammerParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MygrammerParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MygrammerParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMygrammerVisitor<TResult> typedVisitor = visitor as IMygrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(WHILE);
			State = 116;
			Match(LPAREN);
			State = 117;
			expression();
			State = 118;
			Match(RPAREN);
			State = 119;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MygrammerParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MygrammerParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(MygrammerParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(MygrammerParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MygrammerParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMygrammerVisitor<TResult> typedVisitor = visitor as IMygrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			Match(FOR);
			State = 122;
			Match(LPAREN);
			State = 125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 123;
				declaration();
				}
				break;
			case 2:
				{
				State = 124;
				expressionStatement();
				}
				break;
			}
			State = 127;
			Match(SEMICOLON);
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3856897413120L) != 0)) {
				{
				State = 128;
				expression();
				}
			}

			State = 131;
			Match(SEMICOLON);
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3856897413120L) != 0)) {
				{
				State = 132;
				expression();
				}
			}

			State = 135;
			Match(RPAREN);
			State = 136;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MygrammerParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MygrammerParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMygrammerVisitor<TResult> typedVisitor = visitor as IMygrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			Match(RETURN);
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3856897413120L) != 0)) {
				{
				State = 139;
				expression();
				}
			}

			State = 142;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MygrammerParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMygrammerVisitor<TResult> typedVisitor = visitor as IMygrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_expressionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3856897413120L) != 0)) {
				{
				State = 144;
				expression();
				}
			}

			State = 147;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMygrammerVisitor<TResult> typedVisitor = visitor as IMygrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			assignment();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MygrammerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MygrammerParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_ASSIGN() { return GetToken(MygrammerParser.ADD_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_ASSIGN() { return GetToken(MygrammerParser.SUB_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL_ASSIGN() { return GetToken(MygrammerParser.MUL_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_ASSIGN() { return GetToken(MygrammerParser.DIV_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_ASSIGN() { return GetToken(MygrammerParser.MOD_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOrContext logicalOr() {
			return GetRuleContext<LogicalOrContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMygrammerVisitor<TResult> typedVisitor = visitor as IMygrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 24, RULE_assignment);
		int _la;
		try {
			State = 155;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 151;
				Match(ID);
				State = 152;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2113929216L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 153;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 154;
				logicalOr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndContext[] logicalAnd() {
			return GetRuleContexts<LogicalAndContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndContext logicalAnd(int i) {
			return GetRuleContext<LogicalAndContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(MygrammerParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(MygrammerParser.OR, i);
		}
		public LogicalOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMygrammerVisitor<TResult> typedVisitor = visitor as IMygrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOrContext logicalOr() {
		LogicalOrContext _localctx = new LogicalOrContext(Context, State);
		EnterRule(_localctx, 26, RULE_logicalOr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			logicalAnd();
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 158;
				Match(OR);
				State = 159;
				logicalAnd();
				}
				}
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalAndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext[] equality() {
			return GetRuleContexts<EqualityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality(int i) {
			return GetRuleContext<EqualityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(MygrammerParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(MygrammerParser.AND, i);
		}
		public LogicalAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMygrammerVisitor<TResult> typedVisitor = visitor as IMygrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalAndContext logicalAnd() {
		LogicalAndContext _localctx = new LogicalAndContext(Context, State);
		EnterRule(_localctx, 28, RULE_logicalAnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			equality();
			State = 170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 166;
				Match(AND);
				State = 167;
				equality();
				}
				}
				State = 172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext[] comparison() {
			return GetRuleContexts<ComparisonContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison(int i) {
			return GetRuleContext<ComparisonContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQ() { return GetTokens(MygrammerParser.EQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ(int i) {
			return GetToken(MygrammerParser.EQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NE() { return GetTokens(MygrammerParser.NE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE(int i) {
			return GetToken(MygrammerParser.NE, i);
		}
		public EqualityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMygrammerVisitor<TResult> typedVisitor = visitor as IMygrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityContext equality() {
		EqualityContext _localctx = new EqualityContext(Context, State);
		EnterRule(_localctx, 30, RULE_equality);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			comparison();
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EQ || _la==NE) {
				{
				State = 178;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case EQ:
					{
					State = 174;
					Match(EQ);
					State = 175;
					comparison();
					}
					break;
				case NE:
					{
					State = 176;
					Match(NE);
					State = 177;
					comparison();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LT() { return GetTokens(MygrammerParser.LT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT(int i) {
			return GetToken(MygrammerParser.LT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LE() { return GetTokens(MygrammerParser.LE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE(int i) {
			return GetToken(MygrammerParser.LE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(MygrammerParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(MygrammerParser.GT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GE() { return GetTokens(MygrammerParser.GE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE(int i) {
			return GetToken(MygrammerParser.GE, i);
		}
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMygrammerVisitor<TResult> typedVisitor = visitor as IMygrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 32, RULE_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			term();
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 983040L) != 0)) {
				{
				State = 192;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LT:
					{
					State = 184;
					Match(LT);
					State = 185;
					term();
					}
					break;
				case LE:
					{
					State = 186;
					Match(LE);
					State = 187;
					term();
					}
					break;
				case GT:
					{
					State = 188;
					Match(GT);
					State = 189;
					term();
					}
					break;
				case GE:
					{
					State = 190;
					Match(GE);
					State = 191;
					term();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(MygrammerParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(MygrammerParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(MygrammerParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(MygrammerParser.MINUS, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMygrammerVisitor<TResult> typedVisitor = visitor as IMygrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 34, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			factor();
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				State = 202;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PLUS:
					{
					State = 198;
					Match(PLUS);
					State = 199;
					factor();
					}
					break;
				case MINUS:
					{
					State = 200;
					Match(MINUS);
					State = 201;
					factor();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext[] unary() {
			return GetRuleContexts<UnaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext unary(int i) {
			return GetRuleContext<UnaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULT() { return GetTokens(MygrammerParser.MULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT(int i) {
			return GetToken(MygrammerParser.MULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(MygrammerParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(MygrammerParser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MOD() { return GetTokens(MygrammerParser.MOD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD(int i) {
			return GetToken(MygrammerParser.MOD, i);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMygrammerVisitor<TResult> typedVisitor = visitor as IMygrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 36, RULE_factor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			unary();
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 57344L) != 0)) {
				{
				State = 214;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MULT:
					{
					State = 208;
					Match(MULT);
					State = 209;
					unary();
					}
					break;
				case DIV:
					{
					State = 210;
					Match(DIV);
					State = 211;
					unary();
					}
					break;
				case MOD:
					{
					State = 212;
					Match(MOD);
					State = 213;
					unary();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MygrammerParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MygrammerParser.MINUS, 0); }
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMygrammerVisitor<TResult> typedVisitor = visitor as IMygrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(Context, State);
		EnterRule(_localctx, 38, RULE_unary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS || _la==NOT) {
				{
				State = 219;
				_la = TokenStream.LA(1);
				if ( !(_la==MINUS || _la==NOT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 222;
			primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_LITERAL() { return GetToken(MygrammerParser.NUMERIC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MygrammerParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MygrammerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MygrammerParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MygrammerParser.RPAREN, 0); }
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMygrammerVisitor<TResult> typedVisitor = visitor as IMygrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 40, RULE_primary);
		try {
			State = 231;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMERIC_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 224;
				Match(NUMERIC_LITERAL);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 225;
				Match(STRING_LITERAL);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 226;
				Match(ID);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 227;
				Match(LPAREN);
				State = 228;
				expression();
				State = 229;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MygrammerParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(MygrammerParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(MygrammerParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MygrammerParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(MygrammerParser.VOID, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMygrammerVisitor<TResult> typedVisitor = visitor as IMygrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 42, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1984L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,45,236,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		1,0,1,0,1,0,5,0,48,8,0,10,0,12,0,51,9,0,1,0,1,0,1,1,1,1,1,1,1,1,3,1,59,
		8,1,1,1,1,1,1,2,1,2,1,2,1,2,3,2,67,8,2,1,2,1,2,1,2,5,2,72,8,2,10,2,12,
		2,75,9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,5,3,85,8,3,10,3,12,3,88,9,3,1,
		4,1,4,1,4,1,4,1,4,1,4,3,4,96,8,4,1,5,1,5,5,5,100,8,5,10,5,12,5,103,9,5,
		1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,114,8,6,1,7,1,7,1,7,1,7,1,7,1,
		7,1,8,1,8,1,8,1,8,3,8,126,8,8,1,8,1,8,3,8,130,8,8,1,8,1,8,3,8,134,8,8,
		1,8,1,8,1,8,1,9,1,9,3,9,141,8,9,1,9,1,9,1,10,3,10,146,8,10,1,10,1,10,1,
		11,1,11,1,12,1,12,1,12,1,12,3,12,156,8,12,1,13,1,13,1,13,5,13,161,8,13,
		10,13,12,13,164,9,13,1,14,1,14,1,14,5,14,169,8,14,10,14,12,14,172,9,14,
		1,15,1,15,1,15,1,15,1,15,5,15,179,8,15,10,15,12,15,182,9,15,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,5,16,193,8,16,10,16,12,16,196,9,16,
		1,17,1,17,1,17,1,17,1,17,5,17,203,8,17,10,17,12,17,206,9,17,1,18,1,18,
		1,18,1,18,1,18,1,18,1,18,5,18,215,8,18,10,18,12,18,218,9,18,1,19,3,19,
		221,8,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,232,8,20,1,
		21,1,21,1,21,0,0,22,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
		38,40,42,0,3,1,0,25,30,2,0,12,12,24,24,1,0,6,10,251,0,49,1,0,0,0,2,54,
		1,0,0,0,4,62,1,0,0,0,6,78,1,0,0,0,8,95,1,0,0,0,10,97,1,0,0,0,12,106,1,
		0,0,0,14,115,1,0,0,0,16,121,1,0,0,0,18,138,1,0,0,0,20,145,1,0,0,0,22,149,
		1,0,0,0,24,155,1,0,0,0,26,157,1,0,0,0,28,165,1,0,0,0,30,173,1,0,0,0,32,
		183,1,0,0,0,34,197,1,0,0,0,36,207,1,0,0,0,38,220,1,0,0,0,40,231,1,0,0,
		0,42,233,1,0,0,0,44,48,3,2,1,0,45,48,3,4,2,0,46,48,3,8,4,0,47,44,1,0,0,
		0,47,45,1,0,0,0,47,46,1,0,0,0,48,51,1,0,0,0,49,47,1,0,0,0,49,50,1,0,0,
		0,50,52,1,0,0,0,51,49,1,0,0,0,52,53,5,0,0,1,53,1,1,0,0,0,54,55,3,42,21,
		0,55,58,5,41,0,0,56,57,5,25,0,0,57,59,3,22,11,0,58,56,1,0,0,0,58,59,1,
		0,0,0,59,60,1,0,0,0,60,61,5,38,0,0,61,3,1,0,0,0,62,63,3,42,21,0,63,64,
		5,41,0,0,64,66,5,33,0,0,65,67,3,6,3,0,66,65,1,0,0,0,66,67,1,0,0,0,67,68,
		1,0,0,0,68,69,5,34,0,0,69,73,5,35,0,0,70,72,3,8,4,0,71,70,1,0,0,0,72,75,
		1,0,0,0,73,71,1,0,0,0,73,74,1,0,0,0,74,76,1,0,0,0,75,73,1,0,0,0,76,77,
		5,36,0,0,77,5,1,0,0,0,78,79,3,42,21,0,79,86,5,41,0,0,80,81,5,37,0,0,81,
		82,3,42,21,0,82,83,5,41,0,0,83,85,1,0,0,0,84,80,1,0,0,0,85,88,1,0,0,0,
		86,84,1,0,0,0,86,87,1,0,0,0,87,7,1,0,0,0,88,86,1,0,0,0,89,96,3,10,5,0,
		90,96,3,12,6,0,91,96,3,14,7,0,92,96,3,16,8,0,93,96,3,18,9,0,94,96,3,20,
		10,0,95,89,1,0,0,0,95,90,1,0,0,0,95,91,1,0,0,0,95,92,1,0,0,0,95,93,1,0,
		0,0,95,94,1,0,0,0,96,9,1,0,0,0,97,101,5,35,0,0,98,100,3,8,4,0,99,98,1,
		0,0,0,100,103,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,104,1,0,0,0,103,
		101,1,0,0,0,104,105,5,36,0,0,105,11,1,0,0,0,106,107,5,1,0,0,107,108,5,
		33,0,0,108,109,3,22,11,0,109,110,5,34,0,0,110,113,3,8,4,0,111,112,5,2,
		0,0,112,114,3,8,4,0,113,111,1,0,0,0,113,114,1,0,0,0,114,13,1,0,0,0,115,
		116,5,4,0,0,116,117,5,33,0,0,117,118,3,22,11,0,118,119,5,34,0,0,119,120,
		3,8,4,0,120,15,1,0,0,0,121,122,5,3,0,0,122,125,5,33,0,0,123,126,3,2,1,
		0,124,126,3,20,10,0,125,123,1,0,0,0,125,124,1,0,0,0,125,126,1,0,0,0,126,
		127,1,0,0,0,127,129,5,38,0,0,128,130,3,22,11,0,129,128,1,0,0,0,129,130,
		1,0,0,0,130,131,1,0,0,0,131,133,5,38,0,0,132,134,3,22,11,0,133,132,1,0,
		0,0,133,134,1,0,0,0,134,135,1,0,0,0,135,136,5,34,0,0,136,137,3,8,4,0,137,
		17,1,0,0,0,138,140,5,5,0,0,139,141,3,22,11,0,140,139,1,0,0,0,140,141,1,
		0,0,0,141,142,1,0,0,0,142,143,5,38,0,0,143,19,1,0,0,0,144,146,3,22,11,
		0,145,144,1,0,0,0,145,146,1,0,0,0,146,147,1,0,0,0,147,148,5,38,0,0,148,
		21,1,0,0,0,149,150,3,24,12,0,150,23,1,0,0,0,151,152,5,41,0,0,152,153,7,
		0,0,0,153,156,3,22,11,0,154,156,3,26,13,0,155,151,1,0,0,0,155,154,1,0,
		0,0,156,25,1,0,0,0,157,162,3,28,14,0,158,159,5,23,0,0,159,161,3,28,14,
		0,160,158,1,0,0,0,161,164,1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,
		27,1,0,0,0,164,162,1,0,0,0,165,170,3,30,15,0,166,167,5,22,0,0,167,169,
		3,30,15,0,168,166,1,0,0,0,169,172,1,0,0,0,170,168,1,0,0,0,170,171,1,0,
		0,0,171,29,1,0,0,0,172,170,1,0,0,0,173,180,3,32,16,0,174,175,5,20,0,0,
		175,179,3,32,16,0,176,177,5,21,0,0,177,179,3,32,16,0,178,174,1,0,0,0,178,
		176,1,0,0,0,179,182,1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,31,1,0,
		0,0,182,180,1,0,0,0,183,194,3,34,17,0,184,185,5,16,0,0,185,193,3,34,17,
		0,186,187,5,18,0,0,187,193,3,34,17,0,188,189,5,17,0,0,189,193,3,34,17,
		0,190,191,5,19,0,0,191,193,3,34,17,0,192,184,1,0,0,0,192,186,1,0,0,0,192,
		188,1,0,0,0,192,190,1,0,0,0,193,196,1,0,0,0,194,192,1,0,0,0,194,195,1,
		0,0,0,195,33,1,0,0,0,196,194,1,0,0,0,197,204,3,36,18,0,198,199,5,11,0,
		0,199,203,3,36,18,0,200,201,5,12,0,0,201,203,3,36,18,0,202,198,1,0,0,0,
		202,200,1,0,0,0,203,206,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,0,205,35,
		1,0,0,0,206,204,1,0,0,0,207,216,3,38,19,0,208,209,5,13,0,0,209,215,3,38,
		19,0,210,211,5,14,0,0,211,215,3,38,19,0,212,213,5,15,0,0,213,215,3,38,
		19,0,214,208,1,0,0,0,214,210,1,0,0,0,214,212,1,0,0,0,215,218,1,0,0,0,216,
		214,1,0,0,0,216,217,1,0,0,0,217,37,1,0,0,0,218,216,1,0,0,0,219,221,7,1,
		0,0,220,219,1,0,0,0,220,221,1,0,0,0,221,222,1,0,0,0,222,223,3,40,20,0,
		223,39,1,0,0,0,224,232,5,39,0,0,225,232,5,40,0,0,226,232,5,41,0,0,227,
		228,5,33,0,0,228,229,3,22,11,0,229,230,5,34,0,0,230,232,1,0,0,0,231,224,
		1,0,0,0,231,225,1,0,0,0,231,226,1,0,0,0,231,227,1,0,0,0,232,41,1,0,0,0,
		233,234,7,2,0,0,234,43,1,0,0,0,27,47,49,58,66,73,86,95,101,113,125,129,
		133,140,145,155,162,170,178,180,192,194,202,204,214,216,220,231
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
